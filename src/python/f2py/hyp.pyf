!    -*- f90 -*-
python module hyp ! in
    interface  ! in :hyp
        module hypinput ! in :hyp:hypInput.f90
            use precision
            real(kind=realtype) :: epse
            real(kind=realtype) :: epsi
            real(Kind=realtype) :: theta
            real(kind=realtype) :: s0
            real(kind=realtype) :: ps0
            real(kind=realtype) :: pgridratio
            integer(kind=inttype) :: n
            integer(kind=inttype) :: nconstantstart
            integer(kind=inttype) :: nconstantend
            integer(kind=inttype) :: ntruncate
            integer(kind=inttype) :: volsmoothiter
            integer(kind=inttype) :: coarsen
            real(kind=realtype) :: slexp
            real(kind=realtype) :: volcoef
            real(kind=realtype) :: volblend
            real(kind=realtype) :: splay
            real(kind=realtype) :: splayedgeorthogonality
            real(kind=realtype) :: splaycornerorthogonality
            real(kind=realtype) :: kspreltol
            logical :: nonlinear
            logical :: unattachededgesaresymmetry
            logical :: writemetrics
            logical :: nopointreduce
            integer(kind=inttype) :: kspmaxits, preconlag, kspsubspacesize
            real(kind=realtype) :: marchdist
            real(kind=realtype) :: cmax
            real(kind=realtype) :: nodetol
            real(kind=realtype) :: symtol
            real(kind=realtype) :: cornerangle
            integer(kind=inttype), parameter :: bcdefault = -1
            integer(kind=inttype), parameter :: bcsplay = 0
            integer(kind=inttype), parameter :: bcxsymm = 1
            integer(kind=inttype), parameter :: bcysymm = 2
            integer(kind=inttype), parameter :: bczsymm = 3
            integer(kind=inttype), parameter :: bcxconst = 4
            integer(kind=inttype), parameter :: bcyconst = 5
            integer(kind=inttype), parameter :: bczconst = 6
            integer(kind=inttype), parameter :: bcxyconst = 7
            integer(kind=inttype), parameter :: bcyzconst = 8
            integer(kind=inttype), parameter :: bcxzconst = 9
            integer(kind=inttype), parameter :: ilow = 1
            integer(kind=inttype), parameter :: ihigh = 2
            integer(kind=inttype), parameter :: jlow = 3
            integer(kind=inttype), parameter :: jhigh = 4
            logical :: usematrixfree
            real(kind=realtype) :: farfieldtol
            integer(kind=inttype) :: evalmode
            integer(kind=inttype), parameter,optional :: eval_slow=1
            integer(kind=inttype), parameter,optional :: eval_fast=2
            integer(kind=inttype), parameter,optional :: eval_exact=0
            integer(kind=inttype), parameter :: cgnsfiletype=1
            integer(kind=inttype), parameter :: plot3dfiletype=2
            integer(kind=inttype), parameter :: patchinput=3
            character(len=512) :: sourcestrengthfile
            integer(kind=inttype) :: outerfacetype
            integer(kind=inttype), parameter:: outerfacefarfield = 1
            integer(kind=inttype), parameter:: outerfaceoverset = 2
            integer(kind=inttype), dimension(:, :), allocatable :: bcs
            real(kind=realtype), dimension(:, :), allocatable :: volsmoothschedule
        end module hypinput

        module hypdata
          integer(kind=inttype) :: nx
          real(kind=realtype) :: gridratio
          real(kind=realtype) :: minqualityoverall
          real(kind=realtype) :: minvolumeoverall
        end module hypdata

        subroutine releasememory
        end subroutine releasememory

        subroutine setup(filename,filetype) ! in :test:setup3d.F90
          character*(*) intent(in) :: filename
          integer(kind=inttype) intent(in) :: filetype
        end subroutine setup
        subroutine readfamily(cgnsfile,iblock,family,foundfam) ! in :test:readCGNS.F90
            use communication
            use hypdata
            character*(*) intent(in) :: cgnsfile
            integer(kind=inttype) intent(in) :: iblock
            character*32 intent(out) :: family
            logical intent(out) :: foundfam
        end subroutine readfamily

        subroutine setnumberpatches(n) ! in :test:setPatches.F90
            use hypdata
            integer(kind=inttype) intent(in) :: n
        end subroutine setnumberpatches

        subroutine setpatch(ii,xpatch,il,jl) ! in :test:setPatches.F90
            use hypdata
            integer(kind=inttype) intent(in) :: ii
            real(kind=realtype) dimension(il,jl,3),intent(in) :: xpatch
            integer(kind=inttype), optional,intent(in),check(shape(xpatch,0)==il),depend(xpatch) :: il=shape(xpatch,0)
            integer(kind=inttype), optional,intent(in),check(shape(xpatch,1)==jl),depend(xpatch) :: jl=shape(xpatch,1)
        end subroutine setpatch

        subroutine setfamily(i,fam) ! in :test:setup3d.F90
          use hypinput
          integer(kind=inttype) intent(in) :: i
          character*(*) intent(in) :: fam
        end subroutine setfamily

        subroutine getnblocks(filename,filetype,nblocks)
          character*(*), intent(in) :: filename
          integer(kind=inttype), intent(in) :: filetype
          integer(kind=inttype), intent(out) :: nblocks
        end subroutine getnblocks

        subroutine allocatefamilies(n)
          integer(kind=intype), intent(in) :: n
        end subroutine allocatefamilies

        subroutine setuppanels
        end subroutine setuppanels

        subroutine runhyperbolic
        end subroutine runhyperbolic

        subroutine runelliptic
        end subroutine runelliptic

        subroutine writecgns(filename)
          character*(*) :: filename
        end subroutine writecgns

        subroutine initpetsc(comm)
          integer(kind=inttype) :: comm
        end subroutine initpetsc

        subroutine writeplot3d(filename)
            character*(*) :: filename
          end subroutine writeplot3d

        subroutine writelayerplot3d(filename, layer)
          character*(*) :: filename
          integer(kind=inttype) :: layer
        end subroutine writelayerplot3d

        subroutine writelayerfe(filename, layer, partitions)
          character*(*) :: filename
          integer(kind=inttype) :: layer
          logical :: partitions
        end subroutine writelayerfe

        subroutine allocatesurfaces(nsurf) ! in :test:reproject.f90
            integer(kind=inttype) intent(in) :: nsurf
        end subroutine allocatesurfaces
        subroutine setsurface(isurf,ku,kv,tu,tv,coef,nctlu,nctlv) ! in :test:reproject.f90
            integer(kind=inttype) intent(in) :: isurf
            integer(kind=inttype) intent(in) :: ku
            integer(kind=inttype) intent(in) :: kv
            real(kind=realtype) dimension(nctlu+ku),intent(in),depend(ku,nctlu) :: tu
            real(kind=realtype) dimension(nctlv+kv),intent(in),depend(kv,nctlv) :: tv
            real(kind=realtype) dimension(3,nctlv,nctlu),intent(in) :: coef
            integer(kind=inttype), optional,intent(in),check(shape(coef,2)==nctlu),depend(coef) :: nctlu=shape(coef,2)
            integer(kind=inttype), optional,intent(in),check(shape(coef,1)==nctlv),depend(coef) :: nctlv=shape(coef,1)
        end subroutine setsurface

        subroutine getsurfacecoordinates(coords,n) ! in :test:3D_utilities.F90
          real(kind=realtype) dimension(n),intent(inout) :: coords
            integer(kind=inttype), optional,intent(in),check(len(coords)>=n),depend(coords) :: n=len(coords)
        end subroutine getsurfacecoordinates
        subroutine setsurfacecoordinates(coords,n) ! in :test:3D_utilities.F90
          real(kind=realtype) dimension(n),intent(in) :: coords
          integer(kind=inttype), optional,intent(in),check(len(coords)>=n),depend(coords) :: n=len(coords)
        end subroutine setsurfacecoordinates

        ! subroutine smoothwrap(nsteps, stepsize)
        !   integer(kind=inttype) :: nsteps
        !   real(kind=realtype) :: stepsize
        ! end subroutine smoothwrap

        ! subroutine freezeedge(blockid,edge,dstar) ! in :test:smoothing.F90
        !   integer(kind=inttype) intent(in) :: blockid
        !   character*(*) :: edge
        !   real(kind=realtype) intent(in) :: dstar
        ! end subroutine freezeedge

        ! subroutine freezefaces(blockids,nblockids,dstar) ! in :test:smoothing.F90
        !   integer(kind=inttype) dimension(nblockids),intent(in) :: blockids
        !   integer(kind=inttype), optional,intent(in),check(len(blockids)>=nblockids),depend(blockids) :: nblockids=len(blockids)
        !   real(kind=realtype) intent(in) :: dstar
        ! end subroutine freezefaces

     end interface
end python module hyp

! This file was auto-generated with f2py (version:2).
! See http://cens.ioc.ee/projects/f2py2e/
